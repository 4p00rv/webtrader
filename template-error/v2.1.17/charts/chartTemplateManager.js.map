{"version":3,"sources":["../../../../src/charts/chartTemplateManager.es6"],"names":["define","$","chartWindow","rv","require","local_storage","get","set","ChartTemplateManager","root","dialog_id","_this","templates","forEach","tmpl","random","setRandom","state","init_state","append","html","i18n","view","bind","chart","highcharts","route","value","menu","save_changes_disabled","array","save_as_value","rename_tmpl","rename_value","current","current_tmpl","get_chart_options","_","findIndex","t","update","save_as","options","name","timePeriod","type","concat","indicators","map","ind","overlays","overlay","displaySymbol","join","save_changes","inx","push","growl","notice","message","open_file_selector","event","find","click","upload","file","target","files","reader","FileReader","onload","e","contents","result","data","JSON","parse","substring","replace","hash","isDuplicate","error","includes","apply","readAsText","preventDefault","set_chart_options","download","json","stringify","download_file_in_browser","remove","filter","rename","do_rename","new_name","apply_chart_options","confirm","action","currentTarget","text","confirm_prevMenu","confirm_text","confirm_yes","confirm_no","hashCode","s","split","reduce","a","b","charCodeAt","tmpl_copy","unbind","init"],"mappings":"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","file":"chartTemplateManager.js","sourcesContent":["/**\n * Created by amin on July 31, 2016.\n */\ndefine(['jquery', 'charts/chartWindow', 'common/rivetsExtra'], function($, chartWindow, rv) {\n  require(['text!charts/chartTemplateManager.html']);\n\n  if(!local_storage.get('templates')) {\n    local_storage.set('templates', []);\n  }\n\n  class ChartTemplateManager {\n    constructor(root, dialog_id) { \n      const _this = this;\n      const templates = local_storage.get(\"templates\");\n      templates.forEach(function(tmpl){\n        if(!tmpl.random){\n          tmpl = _this.setRandom(tmpl);\n        }\n      });\n      local_storage.set(\"templates\",templates);\n\n      const state = this.init_state(root, dialog_id);\n      require(['text!charts/chartTemplateManager.html'], html => {\n        root.append(html.i18n());\n        this.view = rv.bind(root[0], state);\n      });\n    }\n\n    init_state(root, dialog_id) {\n      const chart = $('#' + dialog_id + '_chart').highcharts();\n      const state = {\n        route: { value: 'menu' },\n        menu: {\n          save_changes_disabled: true\n        },\n        templates: {\n          array: local_storage.get('templates'),\n          save_as_value: '',\n          rename_tmpl: null,\n          rename_value: '',\n          current: null,\n        }\n      };\n      const {route, templates, menu} = state;\n\n      /* persist applied templates between page reloads */\n      const current_tmpl = this.setRandom(chartWindow.get_chart_options(dialog_id));\n      templates.array = local_storage.get(\"templates\");\n      if(_.findIndex(templates.array, t => t.random === current_tmpl.random) !== -1) {\n        templates.current = current_tmpl;\n      }\n      \n      route.update = value => {\n        route.value = value;\n      };\n\n      menu.save_as = () => {\n        const options = chartWindow.get_chart_options(dialog_id) || {};\n        options.name = [`${options.timePeriod} ${options.type}`]\n                      .concat(options.indicators.map(ind => ind.name))\n                      .concat(options.overlays.map(overlay => overlay.displaySymbol))\n                      .join(' + ');\n        templates.save_as_value = options.name;\n        route.update('save-as');\n      }\n\n      menu.templates = () => {\n        templates.array = local_storage.get('templates'); // it can be modified from other dialogs.\n        route.update('templates');\n      }\n\n      menu.save_changes = () => {\n        const current = this.setRandom(chartWindow.get_chart_options(dialog_id));\n        const name = current.name;\n        const array = local_storage.get('templates');\n        const inx = _.findIndex(array, t => t.name === name);\n        if(inx !== -1) {\n          array[inx] = current;\n        } else {\n          array.push(current);\n        }\n        local_storage.set('templates', array);\n        templates.array = array;\n        templates.current = current;\n        $.growl.notice({message: 'Template changes saved '.i18n() + '(' + current.name + ')'});\n      }\n\n      menu.open_file_selector = (event) => {\n        $(root).find(\"input[type=file]\").click();\n      }\n\n      menu.upload = (event) => {\n        const _this = this;\n        const file = event.target.files[0];\n        event.target.files = null;\n        event.target.value = null;\n        if(!file)\n          return;\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const contents = e.target.result;\n          const array = local_storage.get(\"templates\");\n          let data = null;\n          try{\n            data = JSON.parse(contents);\n            data.name = data.name.substring(0,20).replace(/[<>]/g,\"-\");\n            const hash = data.random;\n            data = _this.setRandom(data);\n            if(hash !== data.random){\n              throw \"Invalid JSON file\".i18n();\n            }\n             \n            if(_this.isDuplicate(data, array)){\n              return;\n            }\n\n            if(!data.indicators) {\n              throw \"Invalid template type\".i18n();\n            }\n          } catch(e){\n            $.growl.error({message:e});\n            return;\n          }\n          \n          // Rename duplicate template names.\n          let file = 1,\n              name = data.name;\n          while(1){\n            if(array.map(t => t.name).includes(name)) {\n              name = data.name + \" (\" + file + \")\"\n              file++;\n              continue;\n            }\n            data.name = name;\n            break;\n          }\n\n          templates.apply(data);\n          array.push(data);\n          local_storage.set('templates', array);\n          templates.array = array;\n          $.growl.notice({message: \"Successfully applied the template and saved it as \".i18n() + \"<b>\" + data.name + \"</b>\"});\n        }\n\n        reader.readAsText(file);\n      }\n\n      templates.save_as = (event) => {\n        event.preventDefault();\n        const name = templates.save_as_value.substring(0,20).replace(/[<>]/g,\"-\");\n        const options = this.setRandom(chartWindow.get_chart_options(dialog_id));\n        if(options) {\n          options.name = name;\n          const array = local_storage.get('templates');\n          if(this.isDuplicate(options, array)){\n            return;\n          }\n          array.push(options);\n          templates.current = options;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('menu');\n          chartWindow.set_chart_options(dialog_id, options); /* update the name */\n        }\n      }\n\n      templates.download = (tmpl) => {\n        var json = JSON.stringify(tmpl);\n        download_file_in_browser(tmpl.name + '.json', 'text/json;charset=utf-8;', json);\n        $.growl.notice({message: \"Downloading template as <b>\".i18n() + tmpl.name + \".json</b>\"});\n      }\n\n      templates.remove = (tmpl) => {\n        let array = local_storage.get('templates');\n        templates.array = array.filter(t => t.name !== tmpl.name);\n        local_storage.set('templates', templates.array);\n        if(templates.current && tmpl.name === templates.current.name) {\n          templates.current = null;\n        }\n      }\n\n      templates.rename = tmpl => {\n        templates.rename_value = tmpl.name;\n        templates.rename_tmpl = tmpl;\n        route.update('rename');\n      }\n\n      templates.do_rename = (event) => {\n        event.preventDefault();\n        const name = templates.rename_tmpl.name;\n        const new_name = templates.rename_value.substring(0,20).replace(/[<>]/g,\"-\");\n        const array = local_storage.get('templates');\n        if(array.map(t => t.name).includes(new_name)) {\n            $.growl.error({message: 'Template name already exists'.i18n() });\n            return;\n        };\n        const tmpl = array.find(t => t.name === name);\n        if(tmpl) {\n          tmpl.name = new_name;\n          local_storage.set('templates', array);\n          templates.array = array;\n          route.update('templates');\n\n          /* update template name in chartWindow options */\n          const current = this.setRandom(chartWindow.get_chart_options(dialog_id));\n          if(current.name == name) {\n            current.name = new_name;\n            chartWindow.set_chart_options(dialog_id, current);\n            templates.current = current;\n          }\n        }\n      }\n\n      templates.apply = tmpl => {\n        chartWindow.apply_chart_options(dialog_id, tmpl);\n        templates.current = tmpl;\n      }\n\n      templates.confirm = (tmpl, event) => {\n        route.update(\"confirm\");\n        const action = event.currentTarget.text;\n        templates.confirm_prevMenu = action === \"Delete\".i18n() ? \"templates\" : \"menu\";\n        templates.confirm_text = action === \"Delete\" ? \"Are you sure you want to delete template?\".i18n() : \"Are you sure you want to overwrite current template?\".i18n();\n\n        templates.confirm_yes = () => {\n          action === \"Delete\".i18n()? templates.remove(tmpl) : menu.save_changes();\n          templates.confirm_no();\n        }\n\n        templates.confirm_no = () => {\n          route.update(templates.confirm_prevMenu);\n        }\n      }\n\n      return state;\n    }\n\n    // Create random independent of template name to find duplicates more accurately.\n    setRandom(tmpl) {\n      const name = tmpl.name;\n      delete tmpl.name;\n      delete tmpl.random;\n      tmpl.random = this.hashCode(JSON.stringify(tmpl));\n      tmpl.name = name;\n      return tmpl;\n    }\n\n    hashCode(s) {\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n\n    isDuplicate(tmpl, array){\n      // get template with same values.\n      const tmpl_copy = array.find(function(e){\n        if(e.random == tmpl.random){\n          return e;\n        }\n      });\n      if(tmpl_copy){\n        $.growl.error({message: 'Template already saved as '.i18n() +'<b>' + tmpl_copy.name + '</b>.'});\n        return true;\n      }\n      return false;\n    }\n\n    unbind() {\n      this.view && this.view.unbind();\n      this.view = null;\n    }\n  }\n\n  return {\n    init: (root, dialog_id) => new ChartTemplateManager(root, dialog_id)\n  }\n});\n"]}